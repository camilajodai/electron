Tutorial Electron

1) Iniciar um novo projeto node
npm init

(seguir a documentação)

2) Criar uma estrutura de pastas (modelo de camadas MVC)
src
|---- views
|---- public
        |--- css
        |--- img
        |--- js

3) Personalização da janela
    - dimensões
    - redimensionamento
    - cor 
    - ícone
    - menu e barra de título

4) Personalização do menu
template -> estrutura de dados
Passo 1: importar o recurso Menu e criar template
Passo 2: exibir o template no lugar do menu original

Obs: alguns recursos precisam ser importados:
 ex. Acesso a links externos
 shell

Obs: o shell é usado no main para acessar recursos externos como links

NPM INSTALL -> baixar bibliotecas existentes

5) Processos (principal e renderização)
    - Só pode existir um processo principal (main.js)
    - Para criar um processo de renderização devemos ligar um documento JavaScript na página HTML
    - Podemos usar um único processo de renderização em todas as páginas HTML, 
    porém é recomendado usar um processo de renderização por documento HTML
    - Por uma questão didática, o processo de renderização é o front-end da aplicação
    - E o processo principal é o back-end da aplicação

PRELOAD.JS (seguir a documentação para implementar)
O preload.js é usado para:
1- Expor a utilização do node e recursos do electron para o processo de renderização, 
melhorando o desempenho e a segurança

2- Para situações onde você sabe que vai precisar de certos recursos e dados antes que 
o usuário solicite diretamente, tornando a experiência do usuário mais rápida e suave

Obs: é possível tirar o contexto de isolamento e permitir a execução do node.js no processo de renderização

IPC(inter-process communication)
ipcMain (processo principal)
ipcRenderer (processo de renderização)

sintaxe do ipcMain e ipcRenderer (recebimento)
ipcMain.on(()=>{})
ipcRenderer.on(()=>{})

Fluxo: ipcRenderer -> hello() -> main.js (ipcMain)

----------------------------------------------------------------------------

Uso de framework (front-end) no electron

- bootstrap
    |__ local (download)

Passo 1) fazer o download do css e js compilado
Passo 2) descompactar e copiar o bootstrap.min.css e bootstrap.min.js para a pasta public
Passo 3) link com os documentos HTML

Para usar o bootstrap seguir a documentação:
Dica: o bootstrap trabalha com conceitos de classe
Inicie criando um container (div.container)

---------------------------------------------------------------------------

Relação entre janelas (parent-child) e modal
- Foco do usuário no sistema 
- Segurança e desempenho

Passo 1: determinar a janela pai (principal)
Passo 2: criar o relacionamento entre as janelas


------------------------------------------------------------------------------
IPC - comunicação segura entre Processos

ipcMain (main.js)
    ||-- preload.js

ipcRenderer (renderer.js)

Obs.: 
1 - main.js (processor principal e único)
2 - renderer.js (processo de renderização)
    - podem existir vários processos de renderização
    - renderer.js (nome atribuido / pode escolher qualquer nome)
